{"version":3,"file":"rs-api.umd.js","sources":["../src/bosses/araxxor/models/araxxor-path.model.ts","../src/bosses/araxxor/models/araxxor-rotation.model.ts","../src/bosses/araxxor/models/araxxor-paths.model.ts","../src/bosses/boss-rotation.model.ts","../src/bosses/boss.ts","../src/bosses/araxxor/araxxor.ts","../src/bosses/rots/models/rots-rotation.model.ts","../src/bosses/rots/models/rots-brother.enum.ts","../src/bosses/rots/models/rots-brothers-rotations.model.ts","../src/bosses/rots/rots.ts","../src/bosses/bosses.ts","../src/rs-api.ts"],"sourcesContent":["/***\r\n * @model Schema for araxxor path\r\n */\r\nexport class AraxxorPath {\r\n  constructor(location?: string, number?: number, characteristic?: string) {\r\n    this.location = location || ''\r\n    this.number = number || 0\r\n    this.characteristic = characteristic || ''\r\n  }\r\n  location: string\r\n  number: number\r\n  characteristic: string\r\n}\r\n","import { AraxxorPath } from './araxxor-path.model'\r\n\r\n/***\r\n * @model Schema for araxxor rotation\r\n */\r\nexport class AraxxorRotation {\r\n  constructor(open?: AraxxorPath[], closed?: AraxxorPath) {\r\n    this.open = open || []\r\n    this.closed = closed || new AraxxorPath()\r\n  }\r\n  open: AraxxorPath[]\r\n  closed: AraxxorPath\r\n}\r\n","import { AraxxorPath } from './araxxor-path.model'\r\n\r\n/***\r\n * @hidden\r\n */\r\nexport class AraxxorPaths {\r\n  constructor() {}\r\n  top: AraxxorPath = new AraxxorPath('top', 1, 'Minions')\r\n  middle: AraxxorPath = new AraxxorPath('middle', 2, 'Acid')\r\n  bottom: AraxxorPath = new AraxxorPath('bottom', 3, 'Darkness')\r\n}\r\n","import { AraxxorRotation } from './araxxor/models/araxxor-rotation.model'\nimport { RoTSRotation } from './rots/models/rots-rotation.model'\nimport { VoragoRotation } from './vorago/models/vorago-rotation.model'\n\nexport class BossRotation {\n  constructor(\n    rotation?: AraxxorRotation | RoTSRotation | VoragoRotation,\n    daysUntilNext?: number,\n    startDate?: Date\n  ) {\n    this.rotation = rotation || null\n    this.daysUntilNext = daysUntilNext || 0\n    this.startDate = startDate || new Date()\n  }\n\n  rotation: AraxxorRotation | RoTSRotation | VoragoRotation | null\n  daysUntilNext: number\n  startDate: Date\n}\n","import { BossRotation } from './boss-rotation.model'\n\nexport class Boss {\n  getRotations(forDate?: Date): Promise<BossRotation[]> {\n    return new Promise(resolve => {\n      forDate = forDate == null ? new Date() : forDate\n      resolve(this.getRotationsForSpecific(forDate))\n    })\n  }\n\n  getRotationsForSpecific(forDate: Date): BossRotation[] {\n    return [new BossRotation(undefined, 0, new Date())]\n  }\n}\n","import { AraxxorPath } from './models/araxxor-path.model'\nimport { AraxxorRotation } from './models/araxxor-rotation.model'\nimport { AraxxorPaths } from './models/araxxor-paths.model'\nimport { BossRotation } from '../boss-rotation.model'\nimport { Boss } from '../boss'\n\nexport class Araxxor extends Boss {\n  private availablePaths: AraxxorPaths = new AraxxorPaths()\n  private paths: AraxxorPath[] = [\n    this.availablePaths.top,\n    this.availablePaths.middle,\n    this.availablePaths.bottom\n  ]\n  constructor() {\n    super()\n  }\n\n  getRotationsForSpecific(forDate: Date): BossRotation[] {\n    let rotations: BossRotation[] = []\n    this.paths.forEach((path: AraxxorPath, i: number) => {\n      // find date to calculate for\n      const daysToAdd: number = 4 * i\n      let now: any = new Date(forDate)\n      now.setDate(now.getDate() + daysToAdd)\n      // get rotation index\n      const rotationIndex: number = Math.floor(\n        ((Math.floor(Math.floor(now / 1000) / (24 * 60 * 60)) + 3) % (4 * this.paths.length)) / 4\n      )\n      const closed: AraxxorPath = this.paths[rotationIndex]\n      const open: AraxxorPath[] = this.paths.filter((path: AraxxorPath) => {\n        return path != closed\n      })\n      // find days until the next index would be reached to find last day of rotation\n      const daysUntilNext =\n        4 -\n        (((Math.floor(Date.now() / 1000 / (24 * 60 * 60)) + 3) % (4 * this.paths.length)) % 4) +\n        daysToAdd\n      // find when the current rotation started\n      let start = new Date(forDate)\n      start.setDate(start.getDate() + (daysUntilNext - 4))\n      // build araxxor rotation\n      const rotation: AraxxorRotation = new AraxxorRotation(open, closed)\n      rotations.push(new BossRotation(rotation, daysUntilNext, start))\n    })\n    super.getRotationsForSpecific(forDate)\n    return rotations\n  }\n}\n","import { RoTSBrother } from './rots-brother.enum'\r\n\r\n/***\r\n * @model Schema for a rise of the six rotation\r\n */\r\nexport class RoTSRotation {\r\n  constructor(west?: RoTSBrother[], east?: RoTSBrother[]) {\r\n    this.west = west || null\r\n    this.east = east || null\r\n  }\r\n\r\n  west: RoTSBrother[] | null\r\n  east: RoTSBrother[] | null\r\n}\r\n","/***\r\n * @hidden\r\n */\r\nexport enum RoTSBrother {\r\n  A = 'Ahrim',\r\n  D = 'Dharok',\r\n  G = 'Guthan',\r\n  K = 'Karil',\r\n  T = 'Torag',\r\n  V = 'Verac',\r\n  UNKNOWN = ''\r\n}\r\n","import { RoTSRotation } from './rots-rotation.model'\r\nimport { RoTSBrother } from './rots-brother.enum'\r\n/***\r\n * @hidden\r\n */\r\nexport class RoTSBrothersRotation {\r\n  rotation: RoTSRotation[] = [\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.T, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.K]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.G, RoTSBrother.K, RoTSBrother.T],\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.G, RoTSBrother.K, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.T]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.G, RoTSBrother.T, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.K]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.K, RoTSBrother.T, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.G]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.G],\r\n      [RoTSBrother.K, RoTSBrother.T, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.K],\r\n      [RoTSBrother.G, RoTSBrother.T, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.T],\r\n      [RoTSBrother.G, RoTSBrother.K, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.D, RoTSBrother.V],\r\n      [RoTSBrother.G, RoTSBrother.K, RoTSBrother.T]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.K],\r\n      [RoTSBrother.D, RoTSBrother.T, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.T],\r\n      [RoTSBrother.D, RoTSBrother.K, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.V],\r\n      [RoTSBrother.D, RoTSBrother.K, RoTSBrother.T]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.K, RoTSBrother.T],\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.K, RoTSBrother.V],\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.T]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.A, RoTSBrother.T, RoTSBrother.V],\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.K]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.K],\r\n      [RoTSBrother.A, RoTSBrother.T, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.T],\r\n      [RoTSBrother.A, RoTSBrother.K, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.G, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.K, RoTSBrother.T]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.K, RoTSBrother.T],\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.V]\r\n    ),\r\n    new RoTSRotation(\r\n      [RoTSBrother.D, RoTSBrother.K, RoTSBrother.V],\r\n      [RoTSBrother.A, RoTSBrother.G, RoTSBrother.T]\r\n    )\r\n  ]\r\n}\r\n","import { BossRotation } from '../boss-rotation.model'\nimport { RoTSBrothersRotation } from './models/rots-brothers-rotations.model'\nimport { RoTSRotation } from './models/rots-rotation.model'\nimport { RoTSBrother } from './models/rots-brother.enum'\nimport { Boss } from '../boss'\n\nexport class RoTS extends Boss {\n  private rotsRotation: RoTSRotation[] = new RoTSBrothersRotation().rotation\n  constructor() {\n    super()\n  }\n\n  getRotationsForSpecific(forDate: Date): BossRotation[] {\n    let rotations: BossRotation[] = []\n    this.rotsRotation.forEach((r: RoTSRotation, i: number) => {\n      let now: any = new Date(forDate)\n      now.setDate(now.getDate() + i)\n      const rotationIndex: number = Math.floor(now / 1000 / (24 * 60 * 60)) % 20\n      const rotation = new RoTSRotation(\n        <RoTSBrother[]>this.rotsRotation[rotationIndex].west,\n        <RoTSBrother[]>this.rotsRotation[rotationIndex].east\n      )\n      rotations.push(new BossRotation(rotation, 1, now))\n    })\n    super.getRotationsForSpecific(forDate)\n    return rotations\n  }\n}\n","import { Araxxor } from './araxxor/araxxor'\nimport { RoTS } from './rots/rots'\n\nexport class Bosses {\n  constructor() {}\n\n  araxxor(): Araxxor {\n    return new Araxxor()\n  }\n  rots(): RoTS {\n    return new RoTS()\n  }\n}\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n// ...\nimport { Bosses } from './bosses/bosses'\n\nexport default class RsApi {\n  constructor() {}\n  bosses(): Bosses {\n    return new Bosses()\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA;;;IAGA;QACE,qBAAY,QAAiB,EAAE,MAAe,EAAE,cAAuB;YACrE,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAA;YAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,CAAA;YACzB,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,EAAE,CAAA;SAC3C;QAIH,kBAAC;IAAD,CAAC,IAAA;;ICVD;;;IAGA;QACE,yBAAY,IAAoB,EAAE,MAAoB;YACpD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,WAAW,EAAE,CAAA;SAC1C;QAGH,sBAAC;IAAD,CAAC,IAAA;;ICVD;;;IAGA;QACE;YACA,QAAG,GAAgB,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,SAAS,CAAC,CAAA;YACvD,WAAM,GAAgB,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAA;YAC1D,WAAM,GAAgB,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,UAAU,CAAC,CAAA;SAH9C;QAIlB,mBAAC;IAAD,CAAC,IAAA;;ICND;QACE,sBACE,QAA0D,EAC1D,aAAsB,EACtB,SAAgB;YAEhB,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAA;YAChC,IAAI,CAAC,aAAa,GAAG,aAAa,IAAI,CAAC,CAAA;YACvC,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,IAAI,EAAE,CAAA;SACzC;QAKH,mBAAC;IAAD,CAAC,IAAA;;IChBD;QAAA;SAWC;QAVC,2BAAY,GAAZ,UAAa,OAAc;YAA3B,iBAKC;YAJC,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;gBACxB,OAAO,GAAG,OAAO,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG,OAAO,CAAA;gBAChD,OAAO,CAAC,KAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAA;aAC/C,CAAC,CAAA;SACH;QAED,sCAAuB,GAAvB,UAAwB,OAAa;YACnC,OAAO,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,CAAA;SACpD;QACH,WAAC;IAAD,CAAC,IAAA;;ICPD;QAA6BA,2BAAI;QAO/B;YAAA,YACE,iBAAO,SACR;YARO,oBAAc,GAAiB,IAAI,YAAY,EAAE,CAAA;YACjD,WAAK,GAAkB;gBAC7B,KAAI,CAAC,cAAc,CAAC,GAAG;gBACvB,KAAI,CAAC,cAAc,CAAC,MAAM;gBAC1B,KAAI,CAAC,cAAc,CAAC,MAAM;aAC3B,CAAA;;SAGA;QAED,yCAAuB,GAAvB,UAAwB,OAAa;YAArC,iBA6BC;YA5BC,IAAI,SAAS,GAAmB,EAAE,CAAA;YAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAiB,EAAE,CAAS;;gBAE9C,IAAM,SAAS,GAAW,CAAC,GAAG,CAAC,CAAA;gBAC/B,IAAI,GAAG,GAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;gBAChC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,CAAA;;gBAEtC,IAAM,aAAa,GAAW,IAAI,CAAC,KAAK,CACtC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAC1F,CAAA;gBACD,IAAM,MAAM,GAAgB,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;gBACrD,IAAM,IAAI,GAAkB,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAiB;oBAC9D,OAAO,IAAI,IAAI,MAAM,CAAA;iBACtB,CAAC,CAAA;;gBAEF,IAAM,aAAa,GACjB,CAAC;qBACA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACtF,SAAS,CAAA;;gBAEX,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;gBAC7B,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC,CAAA;;gBAEpD,IAAM,QAAQ,GAAoB,IAAI,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;gBACnE,SAAS,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC,CAAA;aACjE,CAAC,CAAA;YACF,iBAAM,uBAAuB,YAAC,OAAO,CAAC,CAAA;YACtC,OAAO,SAAS,CAAA;SACjB;QACH,cAAC;IAAD,CAAC,CAzC4B,IAAI,GAyChC;;IC7CD;;;IAGA;QACE,sBAAY,IAAoB,EAAE,IAAoB;YACpD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAA;YACxB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAA;SACzB;QAIH,mBAAC;IAAD,CAAC,IAAA;;ICbD;;;AAGA,IAAA,IAAY,WAQX;IARD,WAAY,WAAW;QACrB,0BAAW,CAAA;QACX,2BAAY,CAAA;QACZ,2BAAY,CAAA;QACZ,0BAAW,CAAA;QACX,0BAAW,CAAA;QACX,0BAAW,CAAA;QACX,2BAAY,CAAA;IACd,CAAC,EARW,WAAW,KAAX,WAAW,QAQtB;;ICTD;;;IAGA;QAAA;YACE,aAAQ,GAAmB;gBACzB,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;gBACD,IAAI,YAAY,CACd,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAC7C,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAC9C;aACF,CAAA;SACF;QAAD,2BAAC;IAAD,CAAC,IAAA;;IClFD;QAA0BA,wBAAI;QAE5B;YAAA,YACE,iBAAO,SACR;YAHO,kBAAY,GAAmB,IAAI,oBAAoB,EAAE,CAAC,QAAQ,CAAA;;SAGzE;QAED,sCAAuB,GAAvB,UAAwB,OAAa;YAArC,iBAcC;YAbC,IAAI,SAAS,GAAmB,EAAE,CAAA;YAClC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,CAAe,EAAE,CAAS;gBACnD,IAAI,GAAG,GAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;gBAChC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;gBAC9B,IAAM,aAAa,GAAW,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAA;gBAC1E,IAAM,QAAQ,GAAG,IAAI,YAAY,CAChB,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,IAAI,EACrC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,IAAI,CACrD,CAAA;gBACD,SAAS,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;aACnD,CAAC,CAAA;YACF,iBAAM,uBAAuB,YAAC,OAAO,CAAC,CAAA;YACtC,OAAO,SAAS,CAAA;SACjB;QACH,WAAC;IAAD,CAAC,CArByB,IAAI,GAqB7B;;ICxBD;QACE;SAAgB;QAEhB,wBAAO,GAAP;YACE,OAAO,IAAI,OAAO,EAAE,CAAA;SACrB;QACD,qBAAI,GAAJ;YACE,OAAO,IAAI,IAAI,EAAE,CAAA;SAClB;QACH,aAAC;IAAD,CAAC,IAAA;;ICZD;AACA,IAIA;QACE;SAAgB;QAChB,sBAAM,GAAN;YACE,OAAO,IAAI,MAAM,EAAE,CAAA;SACpB;QACH,YAAC;IAAD,CAAC,IAAA;;;;;;;;"}